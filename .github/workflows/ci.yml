name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Security and Code Quality Checks - Must pass first
  security-and-quality:
    name: Security & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      # Critical: Check for security vulnerabilities in dependencies
      - name: Check for vulnerable dependencies
        run: |
          flutter pub outdated --mode=null-safety || true
          echo "Checking for known security issues..."

      # Critical: Verify pubspec.lock exists and dependencies are locked
      - name: Verify dependency lock file
        run: |
          if [ ! -f "pubspec.lock" ]; then
            echo "Error: pubspec.lock not found. Dependencies must be locked."
            exit 1
          fi

  # Comprehensive Testing - Must pass before build
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-and-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Critical: All widget tests must pass
      - name: Run widget tests (Mandatory)
        run: |
          flutter test test/widget/ --coverage
          if [ $? -ne 0 ]; then
            echo "‚ùå Widget tests failed. All tests must pass."
            exit 1
          fi

  # Build Validation - Must compile successfully
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: "stable"

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Critical: Validate Android configuration
      - name: Validate Android build configuration
        run: |
          if [ ! -f "android/app/build.gradle" ]; then
            echo "‚ùå Android build.gradle not found"
            exit 1
          fi
          if [ ! -f "android/key.properties" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "‚ö†Ô∏è Warning: key.properties not found for production build"
          fi

      # Critical: Build must succeed
      - name: Build APK (Mandatory)
        run: |
          flutter build apk --release --split-per-abi
          if [ $? -ne 0 ]; then
            echo "‚ùå Build failed. Fix build errors before proceeding."
            exit 1
          fi

      # Critical: Verify APK was created
      - name: Verify APK output
        run: |
          if [ ! -d "build/app/outputs/apk/release/" ]; then
            echo "‚ùå APK output directory not found"
            exit 1
          fi
          APK_COUNT=$(find build/app/outputs/apk/release/ -name "*.apk" | wc -l)
          if [ $APK_COUNT -eq 0 ]; then
            echo "‚ùå No APK files generated"
            exit 1
          fi
          echo "‚úÖ Successfully generated $APK_COUNT APK file(s)"

      # Critical: Check APK size (prevent bloat)
      - name: Check APK size
        run: |
          MAX_SIZE_MB=50
          for apk in build/app/outputs/apk/release/*.apk; do
            SIZE_MB=$(du -m "$apk" | cut -f1)
            if [ $SIZE_MB -gt $MAX_SIZE_MB ]; then
              echo "‚ö†Ô∏è Warning: $apk is ${SIZE_MB}MB, exceeding recommended size of ${MAX_SIZE_MB}MB"
            else
              echo "‚úÖ $apk size: ${SIZE_MB}MB (within limits)"
            fi
          done

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/apk/release/
          retention-days: 30

  # Final validation step
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [security-and-quality, test, build-android]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: All checks passed
        run: |
          echo "‚úÖ All mandatory checks passed successfully!"
          echo "‚úÖ Security & Quality: Passed"
          echo "‚úÖ Tests: Passed"
          echo "‚úÖ Build: Passed"
          echo "üöÄ Build is ready for deployment"
